@page "/"
@page "/crypto"
@rendermode InteractiveServer
@using System.Net.Http
@using System.Net.Http.Json
@using System.Globalization
@using Zaliczenie.Components.Models
@using Zaliczenie.Components.Services
@using Zaliczenie.Components.Utils

@inject CryptoService CryptoService

<h3>Najpopularniejsze kryptowaluty z CoinCap</h3>
@if (assets is null)
{
    <p>Ładowanie danych...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Rank</th>
                <th>Logo</th>
                <th>Nazwa</th>
                <th>Symbol</th>
                <th>Cena (USD)</th>
                <th>Zmiana % w 24h</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var asset in assets)
            {
                <tr class="@ShouldRowBeGreenOrRed(asset)">
                    <td>@asset.rank</td>
                    <td>
                        <img src="@asset.IconUrl"
                             alt="@asset.symbol"
                             width="32" height="32"
                             onerror="this.onerror=null;
                                this.src='sample-icon.png';" />
                    </td>
                    <td>@asset.name</td>
                    <td>@asset.symbol</td>
                    <td>@(ParsingUtils.ParseDecimal(asset.priceUsd).ToString("C2", CultureInfo.GetCultureInfo("en-US")))</td>
                    <td>@(ParsingUtils.ParseDecimal(asset.changePercent24Hr).ToString("N2"))%</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<CoinCapAsset>? assets;

    protected override async Task OnInitializedAsync()
    {
        assets = await CryptoService.GetCoinsAsync();
    }

    private string ShouldRowBeGreenOrRed(CoinCapAsset asset)
    {
        if (asset is null) return "";
        var valuePercent = ParsingUtils.ParseDecimal(asset.changePercent24Hr);
        return valuePercent > 0 ? "table-success" : "table-danger";
    }

}
